generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Platforms {
  NINTENDO_SWITCH
  NINTENDO_WIIU
  NINTENDO_WII
  NINTENDO_GAMECUBE
  NINTENDO_64
  PS5
  PS4
  PS3
  PS2
  XBOX_X
  XBOX_S
  XBOX_ONE
  XBOX
}

enum ListType {
  Anime
  Movies
  Songs
  VideoGames
}

model User {
  user_id        String     @id @default(cuid())
  name           String
  display_name   String
  email          String     @unique
  password       String
  owned_groups   Group[]
  member_of      MemberOf[]
  authored_lists List[]
  liked_lists    Likes[]
  followers      Follow[]   @relation("FollowedUsers")
  following      Follow[]   @relation("FollowingUsers")

  created_at DateTime @default(now())
}

model Likes {
  user_id   String
  list_name String
  user      User   @relation(fields: [user_id], references: [user_id])
  list      List   @relation(fields: [list_name, user_id], references: [name, author_id])

  @@id([user_id, list_name])
  @@unique([user_id, list_name])
}

model Follow {
  following_id String
  followed_id  String
  following    User   @relation("FollowingUsers", fields: [following_id], references: [user_id])
  followed     User   @relation("FollowedUsers", fields: [followed_id], references: [user_id])

  @@id([followed_id, following_id])
  @@unique([followed_id, following_id])
}

model MemberOf {
  user_id  String
  user     User   @relation(fields: [user_id], references: [user_id])
  group_id String
  group    Group  @relation(fields: [group_id], references: [group_id])

  @@id([user_id, group_id])
  @@unique([user_id, group_id])
}

model Group {
  group_id   String     @id @default(cuid())
  group_name String
  owner_id   String
  owner      User       @relation(fields: [owner_id], references: [user_id])
  members    MemberOf[]
}

model List {
  name       String        @unique
  author_id  String
  type       ListType
  author     User          @relation(fields: [author_id], references: [user_id])
  media      MediaInList[]
  likes      Likes[]
  created_at DateTime      @default(now())

  @@id([author_id, name])
}

model MediaInList {
  media_id  String
  media     Media  @relation(fields: [media_id], references: [id])
  list_name String
  list      List   @relation(fields: [list_name], references: [name])

  @@id([media_id, list_name])
  @@unique([media_id, list_name])
}

model Media {
  id         String        @id @default(cuid())
  title      String
  image      String
  creators   String[]
  in_lists   MediaInList[]
  created_at DateTime      @default(now())
}

model Anime {
  anime_id String @id @default(cuid())
  episodes Int
}

model Movies {
  movie_id String @id @default(cuid())
}

model Songs {
  song_id String @id @default(cuid())
  album   String
}

model VideoGames {
  video_game_id String      @id @default(cuid())
  platforms     Platforms[]
}
