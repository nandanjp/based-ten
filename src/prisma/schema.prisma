generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model anime {
  id          Int       @id
  title       String    @db.VarChar(30)
  mediaimega  String?
  createdon   DateTime? @db.Date
  numepisodes Int?
}

model follows {
  followeremail                       String @db.VarChar(30)
  followingemail                      String @db.VarChar(30)
  users_follows_followeremailTousers  users  @relation("follows_followeremailTousers", fields: [followeremail], references: [email], onDelete: NoAction, onUpdate: NoAction)
  users_follows_followingemailTousers users  @relation("follows_followingemailTousers", fields: [followingemail], references: [email], onDelete: NoAction, onUpdate: NoAction)

  @@id([followeremail, followingemail])
}

model groupmembers {
  email  String @db.VarChar(30)
  gid    Int
  users  users  @relation(fields: [email], references: [email], onDelete: NoAction, onUpdate: NoAction)
  groups groups @relation(fields: [gid], references: [gid], onDelete: NoAction, onUpdate: NoAction)

  @@id([email, gid])
}

model groups {
  gid          Int            @id
  groupname    String         @db.VarChar(30)
  ownedby      String         @db.VarChar(30)
  groupmembers groupmembers[]
  users        users          @relation(fields: [ownedby], references: [email], onDelete: NoAction, onUpdate: NoAction)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model likes {
  likeremail  String    @db.VarChar(30)
  likingemail String    @db.VarChar(30)
  listname    String    @db.VarChar(30)
  users       users     @relation(fields: [likeremail], references: [email], onDelete: NoAction, onUpdate: NoAction)
  listitems   listitems @relation(fields: [likingemail, listname], references: [email, listname], onDelete: NoAction, onUpdate: NoAction)

  @@ignore
}

model listitems {
  email    String  @db.VarChar(30)
  listname String  @db.VarChar(30)
  itemid   Int
  likes    likes[] @ignore
  lists    lists   @relation(fields: [email, listname], references: [email, listname], onDelete: NoAction, onUpdate: NoAction)

  @@unique([email, listname])
}

model lists {
  email     String     @db.VarChar(30)
  listname  String     @db.VarChar(30)
  listtype  listtype
  listitems listitems?
  users     users      @relation(fields: [email], references: [email], onDelete: NoAction, onUpdate: NoAction)

  @@id([email, listname])
}

model movies {
  id         Int       @id
  title      String    @db.VarChar(30)
  mediaimega String?
  createdon  DateTime? @db.Date
}

model songs {
  id         Int       @id
  title      String    @db.VarChar(30)
  author     String?   @db.VarChar(30)
  album      String?   @db.VarChar(30)
  mediaimega String?
  createdon  DateTime? @db.Date
}

model users {
  email                                 String         @id @db.VarChar(30)
  displayname                           String         @db.VarChar(20)
  userpassword                          String         @db.VarChar(30)
  follows_follows_followeremailTousers  follows[]      @relation("follows_followeremailTousers")
  follows_follows_followingemailTousers follows[]      @relation("follows_followingemailTousers")
  groupmembers                          groupmembers[]
  groups                                groups[]
  likes                                 likes[]        @ignore
  lists                                 lists[]
}

model videogames {
  id         Int       @id
  title      String    @db.VarChar(30)
  mediaimega String?
  createdon  DateTime? @db.Date
  console    String?   @db.VarChar(30)
}

enum Platforms {
  NINTENDO_SWITCH
  NINTENDO_WIIU
  NINTENDO_WII
  NINTENDO_GAMECUBE
  NINTENDO_64
  PS5
  PS4
  PS3
  PS2
  XBOX_X
  XBOX_S
  XBOX_ONE
  XBOX
}

enum ListType {
  Anime
  Movies
  Songs
  VideoGames
}

enum listtype {
  anime
  movies
  songs
  videogames
}
